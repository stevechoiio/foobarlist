{"version":3,"sources":["components/User.js","components/List.js","components/FooBar.js","App.js","serviceWorker.js","index.js"],"names":["User","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMouseHover","setState","toggleHoverState","state","isHovering","isHover","_this$props","user","name","deleteUser","userName","id","joined","react_default","a","createElement","Card","onMouseEnter","onMouseLeave","Body","Title","Subtitle","className","moment","format","Button","onClick","Component","List","_ref","users","Col","style","width","Header","ListGroup","variant","Item","map","User_User","FooBar","fooUsers","barUsers","fooBarUsers","forEach","push","Container","Row","App","filter","Date","fooMax","barMax","fooBarMax","components_FooBar","FooSize","BarSize","FooBarSize","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df1fde06.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nexport default class User extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isHover: false };\n  }\n  handleMouseHover = () => {\n    this.setState(this.toggleHoverState);\n  };\n\n  toggleHoverState = state => {\n    return {\n      isHovering: !state.isHovering\n    };\n  };\n\n  render() {\n    let { user, name, deleteUser } = this.props;\n    let { userName, id, joined } = user;\n    return (\n      <Card\n        onMouseEnter={this.handleMouseHover}\n        onMouseLeave={this.handleMouseHover}\n      >\n        <Card.Body>\n          <Card.Title>{userName}</Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted\">{id}</Card.Subtitle>\n          <Card.Subtitle className=\"mb-2 text-muted\">\n            {moment(joined).format(\"MMM Do\")}\n          </Card.Subtitle>\n          {this.state.isHovering && (\n            <Button onClick={() => deleteUser(id)}>{name}</Button>\n          )}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import React from \"react\";\nimport User from \"./User\";\nimport { Card, ListGroup, Col } from \"react-bootstrap\";\nexport default ({ name, users, deleteUser }) => {\n  return (\n    <Col>\n      <Card style={{ width: \"18rem\" }}>\n        <Card.Header>{name}</Card.Header>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item>\n            {users.map(user => {\n              return <User user={user} name={name} deleteUser={deleteUser} />;\n            })}\n          </ListGroup.Item>\n        </ListGroup>\n      </Card>\n    </Col>\n  );\n};\n","import React from \"react\";\nimport List from \"./List\";\nimport { Container, Row } from \"react-bootstrap\";\n\nconst FooBar = ({ users, deleteUser }) => {\n  let fooUsers = [];\n  let barUsers = [];\n  let fooBarUsers = [];\n  users.forEach(user => {\n    if (user.id % 15 === 0) {\n      fooBarUsers.push(user);\n    } else if (user.id % 3 === 0) {\n      fooUsers.push(user);\n    } else if (user.id % 5 === 0) {\n      barUsers.push(user);\n    }\n  });\n  return (\n    <Container>\n      <Row>\n        <List users={fooUsers} name=\"foo\" deleteUser={deleteUser} />\n        <List users={barUsers} name=\"bar\" deleteUser={deleteUser} />\n        <List users={fooBarUsers} name=\"fooBar\" deleteUser={deleteUser} />\n      </Row>\n    </Container>\n  );\n};\n\nexport default FooBar;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FooBar from \"./components/FooBar\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        { id: 3, userName: \"Bob\", joined: new Date(\"January 31 1980 12:30\") },\n        { id: 5, userName: \"Aob\", joined: new Date(\"January 2 1911 12:30\") },\n        { id: 10, userName: \"Aob\", joined: new Date(\"Feburary 2 1911 12:30\") },\n        { id: 15, userName: \"Cob\", joined: new Date(\"December 2 1911 12:30\") },\n        { id: 30, userName: \"Dob\", joined: new Date(\"June 2 1911 12:30\") },\n        { id: 45, userName: \"Fob\", joined: new Date(\"March 2 1911 12:30\") },\n        { id: 60, userName: \"Gob\", joined: new Date(\"January 11 1911 12:30\") },\n        { id: 9, userName: \"Eob\", joined: new Date(\"January 3 1911 12:30\") },\n        { id: 6, userName: \"Zob\", joined: new Date(\"January 19 1932 12:30\") }\n      ],\n      fooMax: 5,\n      barMax: 10,\n      fooBarMax: 15\n    };\n  }\n  deleteUser = id => {\n    this.setState({\n      users: this.state.users.filter(user => {\n        return user.id !== id;\n      })\n    });\n  };\n  render() {\n    return (\n      <div>\n        <FooBar\n          users={this.state.users}\n          FooSize={this.state.fooMax}\n          BarSize={this.state.barMax}\n          FooBarSize={this.state.fooBarMax}\n          deleteUser={this.deleteUser}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}